6e3c06cfa5828db6330b31f872ca163d
"use strict";

var _interopRequireDefault = require("/home/etontest/burger-builder/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("/home/etontest/burger-builder/node_modules/@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("/home/etontest/burger-builder/node_modules/@babel/runtime/helpers/objectSpread"));

var _react = _interopRequireWildcard(require("react"));

var _Burger = _interopRequireDefault(require("../../components/Burger/Burger"));

var _BuildControls = _interopRequireDefault(require("../../components/Burger/BuildControls/BuildControls"));

var _Modal = _interopRequireDefault(require("../../components/UI/Modal/Modal"));

var _OrderSummary = _interopRequireDefault(require("../../components/Burger/OrderSummary/OrderSummary"));

var _jsxFileName = "/home/etontest/burger-builder/src/containers/BurgerBuilder/BurgerBuilder.js";
const INGREDIENT_PRICES = {
  salad: 0.5,
  cheese: 0.4,
  meat: 1.3,
  bacon: 0.7
};

class BurgerBuilder extends _react.Component {
  constructor(...args) {
    super(...args);
    this.state = {
      ingredients: {
        salad: 0,
        bacon: 0,
        cheese: 0,
        meat: 0
      },
      totalPrice: 4,
      purchasable: false,
      purchasing: false
    };

    this.updatePurchaseState = ingredients => {
      const sum = Object.keys(ingredients).map(igKey => {
        return ingredients[igKey];
      }).reduce((sum, el) => {
        return sum + el;
      }, 0);
      this.setState({
        purchasable: sum > 0
      });
    };

    this.addIngredientHandler = type => {
      const oldCount = this.state.ingredients[type];
      const updatedCount = oldCount + 1;
      const updatedIngredients = (0, _objectSpread2.default)({}, this.state.ingredients);
      updatedIngredients[type] = updatedCount;
      const priceAddition = INGREDIENT_PRICES[type];
      const oldPrice = this.state.totalPrice;
      const newPrice = oldPrice + priceAddition;
      this.setState({
        totalPrice: newPrice,
        ingredients: updatedIngredients
      });
      this.updatePurchaseState(updatedIngredients);
    };

    this.removeIngredientHandler = type => {
      const oldCount = this.state.ingredients[type];

      if (oldCount <= 0) {
        return;
      }

      const updatedCount = oldCount - 1;
      const updatedIngredients = (0, _objectSpread2.default)({}, this.state.ingredients);
      updatedIngredients[type] = updatedCount;
      const priceDeduction = INGREDIENT_PRICES[type];
      const oldPrice = this.state.totalPrice;
      const newPrice = oldPrice - priceDeduction;
      this.setState({
        totalPrice: newPrice,
        ingredients: updatedIngredients
      });
      this.updatePurchaseState(updatedIngredients);
    };

    this.purchaseHandler = () => {
      this.setState({
        purchasing: true
      });
    };

    this.purchaseCancelHandler = () => {
      this.setState({
        purchasing: false
      });
    };

    this.purchaseContinueHandler = () => {
      alert('You Continue!');
    };
  }

  render() {
    const disabledInfo = (0, _objectSpread2.default)({}, this.state.ingredients);

    for (let key in disabledInfo) {
      disabledInfo[key] = disabledInfo[key] <= 0;
    }

    return _react.default.createElement(_react.default.Fragment, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 97
      },
      __self: this
    }, _react.default.createElement(_Modal.default, {
      show: this.state.purchasing,
      modalClosed: this.purchaseCancelHandler,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 98
      },
      __self: this
    }, _react.default.createElement(_OrderSummary.default, {
      totalPrice: this.state.totalPrice,
      purchaseCancelled: this.purchaseCancelHandler,
      purchaseContinued: this.purchaseContinueHandler,
      ingredients: this.state.ingredients,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 99
      },
      __self: this
    })), _react.default.createElement(_Burger.default, {
      ingredients: this.state.ingredients,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 105
      },
      __self: this
    }), _react.default.createElement(_BuildControls.default, {
      ingredientRemove: this.removeIngredientHandler,
      ingredientAdded: this.addIngredientHandler,
      disabled: disabledInfo,
      price: this.state.totalPrice,
      purchasable: this.state.purchasable,
      order: this.purchaseHandler,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 106
      },
      __self: this
    }));
  }

}

var _default = BurgerBuilder;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,